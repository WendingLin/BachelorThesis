function [y1,xf1] = NARNET(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 28-May-2018 17:08:11.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x7 matrix, initial 7 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x7 matrix, final 7 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 5.88280785246877;
x1_step1.gain = 0.344009004399877;
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.075038999666829;-1.0444262951097913;-1.5240802076518856;1.3714222335767594;1.3679614157199074;-0.17953985747052162;-0.40439013036377469;-3.2485080169609062;2.2805397300554335;1.4878697787693904];
IW1_1 = [1.3958693809624021 0.44903378041594966 0.58964916966297776 2.0436325988443866 -0.80788531771099603 1.4045586461753721 1.7319617663260038;1.7352680694554548 -2.4146950192387968 -1.3895473716553093 -1.1402278626745086 0.5749912804471744 -1.7970577406620809 -0.95496081700518654;1.9238411258290868 -1.8274153015071914 -0.64304407934907792 -0.096730590441004183 1.6900048347262047 -1.1893368929160175 0.064767244243155275;-1.0696280399494069 2.5796010088849242 -2.5005172386164123 -1.8996825213837103 -1.099514012661239 0.75797718542506143 -3.329177759064796;-1.3140521974630621 0.24241353591973291 1.6798115935260651 0.89925051535952683 -0.98468096490538826 -0.90130487528308578 2.347645547699361;1.4666083915478083 0.0024274713549903883 -0.40070388465898921 0.94079797881139315 -0.51375332717523714 -1.1253988884652155 -0.69437284125001741;-0.91012472108654696 -0.36240922004733678 1.0889199838279149 -0.21825462417774738 -0.46146451186466414 2.4444012335239873 -1.1447556974519997;-1.7025188460777172 2.8986220915003611 2.2847777564216232 0.083307085747806736 -0.33501463597709291 -0.64767654680880637 0.51284599503242922;-0.13071670070920252 -0.54102236096557133 0.85781331140519412 -0.23443839765080055 -1.6922093494288593 -1.436120225160656 0.88121748066706884;1.7590889599380657 1.3880423222267932 1.1970166898944887 -0.75938962438188617 -0.29229925445179605 -2.1260873655593091 1.1899020604280213];

% Layer 2
b2 = -0.52772689039347553;
LW2_1 = [0.69590928763817272 0.57723034778430338 1.5341002871635134 0.72076716312731537 0.6285911889338518 -0.21507895346573042 1.0668613866451138 -0.92666586754808289 0.4588497524013328 0.68489116360464575];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.344009004399877;
y1_step1.xoffset = 5.88280785246877;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+6,8)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7]-1,8)+1),7,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 7);
xits = finalxts(finalxts<=7);
xts = finalxts(finalxts>7)-7;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
